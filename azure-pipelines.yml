trigger:
- master
- refs/tags/v*

jobs:

#
# Windows
#

- job: Windows
  pool:
    vmImage: 'windows-latest'

  variables:
    solution: 'password-manager-access.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'

  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Build NuGet package
    inputs:
      command: pack
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/nuget'

  - publish: src/bin/$(buildConfiguration)
    artifact: nuget-win

#
# Linux
#

- job: Linux
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    framework: 'netcoreapp3.0'
    solution: 'password-manager-access.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'

  steps:
  - bash: 'dotnet restore $(solution)'
    displayName: Restore

  - bash: 'dotnet build -c $(buildConfiguration) --no-restore $(solution)'
    displayName: Build

  - bash: 'dotnet test -c $(buildConfiguration) --framework $(framework) --logger trx --no-build $(solution)'
    displayName: Test

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/TestResults/*.trx

  - bash: 'dotnet pack -c $(buildConfiguration) --no-build $(solution)'
    displayName: Pack

  - publish: src/bin/$(buildConfiguration)
    artifact: nuget

  # - task: DotNetCoreCLI@2
  #   displayName: Build
  #   inputs:
  #     command: build
  #     configuration: '$(buildConfiguration)'

  # - task: DotNetCoreCLI@2
  #   displayName: Test
  #   inputs:
  #     command: test
  #     arguments: '--framework $(framework)'

  # - task: DotNetCoreCLI@2
  #   displayName: Build NuGet package
  #   inputs:
  #     command: pack
  #     projects: src/PasswordManagerAccess.csproj
  #     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/nuget-linux --no-build --verbosity normal'
  #     verbosityRestore: normal
  #     verbosityPack: normal

  # - bash: 'dotnet pack --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/nuget-linux --no-build --verbosity normal'

  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     path: '$(Build.ArtifactStagingDirectory)/nuget-linux'
  #     artifact: nuget-package-linux

#
# Release to GitHub
#

- job: Release

  dependsOn:
  - Windows
  - Linux

  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/v')

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - download: current
    artifact: nuget

  - download: current
    artifact: nuget-win

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: github-release
      assets: $(Pipeline.Workspace)/**/*.nupkg
      tagSource: manual
      tag: $(Build.BuildNumber)
